/*
 * Copyright (C) 2015 Sleepcamel.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.sleepcamel.bsoneer.tests.integration;

import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
import static com.sleepcamel.bsoneer.tests.integration.ProcessorTestUtils.bsoneerProcessors;
import static org.truth0.Truth.ASSERT;

import javax.tools.JavaFileObject;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import com.google.common.base.Joiner;
import com.google.testing.compile.JavaFileObjects;
import com.sleepcamel.bsoneer.processor.BsonProcessor;

@RunWith(JUnit4.class)
public final class BsonCodecGenerationTest {
  @Test public void basicCodec() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Person", Joiner.on("\n").join(
        "import com.sleepcamel.bsoneer.Bsonee;",
        "@Bsonee",
        "class Person {",
        "  int a;",
        "}"));

    JavaFileObject expectedCodec =
        JavaFileObjects.forSourceString("PersonBsoneeCodec", Joiner.on("\n").join(
        		"// Code generated by bsoneer-compiler.  Do not edit.",
        		"//",
        		"import com.sleepcamel.bsoneer.BaseBsoneerCodec;",
        		"import com.sleepcamel.bsoneer.BsoneeBaseSetter;",
        		"import java.lang.Class;",
        		"import java.lang.Override;",
        		"import java.lang.SuppressWarnings;",
        		"import org.bson.BsonReader;",
        		"import org.bson.BsonWriter;",
        		"import org.bson.codecs.DecoderContext;",
        		"import org.bson.codecs.EncoderContext;",
        		"import org.bson.codecs.configuration.CodecRegistry;",
        		"",
        		"/**",
        		" * Code generated by bsoneer-compiler.  Do not edit.",
        		" */",
        		"public class PersonBsoneeCodec extends BaseBsoneerCodec<Person> {",
        		"	public PersonBsoneeCodec() {",
        		"		super();",
        		"	}",
        		"",
        		"	public PersonBsoneeCodec(final CodecRegistry registry) {",
        		"		super(registry);",
        		"	}",
        		"",
        		"	/**",
        		"	 * {@inhericDoc}",
        		"	 */",
        		"	public Class<Person> getEncoderClass() {",
        		"		return Person.class;",
        		"	}",
        		"",
        		"	/**",
        		"	 * {@inhericDoc}",
        		"	 */",
        		"	@Override",
        		"	@SuppressWarnings({\"unchecked\", \"rawtypes\"})",
        		"	protected void encodeVariables(BsonWriter writer, Person value, EncoderContext encoderContext) {",
        		"		writer.writeInt32(\"a\", value.a);",
        		"		super.encodeVariables(writer,value,encoderContext);",
        		"	}",
        		"",
        		"	@Override",
        		"	protected Person instantiate() {",
        		"		return new Person();",
        		"	}",
        		"",
        		"	protected void setupSetters() {",
        		"		settersByName.put(\"a\",new ASetter());",
        		"	}",
        		"",
        		"	class ASetter implements BsoneeBaseSetter<Person> {",
        		"		public void set(Person instance, BsonReader reader, DecoderContext decoderContext) {",
        		"			instance.a = reader.readInt32();",
        		"		}",
        		"	}",
        		"",
        		"}"));

    JavaFileObject expectedCodecProvider =
        JavaFileObjects.forSourceString("BsoneeCodecProvider", Joiner.on("\n").join(
        		"// Code generated by bsoneer-compiler.  Do not edit.",
        		"//",
        		"import java.lang.Class;",
        		"import java.lang.Override;",
        		"import java.lang.SuppressWarnings;",
        		"import org.bson.codecs.Codec;",
        		"import org.bson.codecs.configuration.CodecProvider;",
        		"import org.bson.codecs.configuration.CodecRegistry;",
        		"",
        		"/**",
        		" * Code generated by bsoneer-compiler.  Do not edit.",
        		" */",
        		"public class BsoneeCodecProvider implements CodecProvider {",
        		"	public BsoneeCodecProvider() {",
        		"	}",
        		"",
        		"	/**",
        		"	 * {@inhericDoc}",
        		"	 */",
        		"	@Override",
        		"	@SuppressWarnings({\"unchecked\"})",
        		"	public <T> Codec<T> get(final Class<T> clazz, final CodecRegistry registry) {",
        		"		if ( clazz == Person.class ) {",
        		"			return (Codec<T>) new PersonBsoneeCodec(registry);",
        		"		}",
        		"		return null;",
        		"	}",
        		"}"));

    ASSERT.about(javaSource()).that(sourceFile).processedWith(bsoneerProcessors())
        .compilesWithoutError().and().generatesSources(expectedCodec, expectedCodecProvider);
  }
  
  @Test public void errorBsonneIsInterface() {
	    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Person", Joiner.on("\n").join(
	        "import com.sleepcamel.bsoneer.Bsonee;",
	        "@Bsonee",
	        "interface Person {",
	        "  public void setBla();",
	        "}"));
	    ASSERT.about(javaSource()).that(sourceFile).processedWith(bsoneerProcessors()).failsToCompile().withErrorContaining(BsonProcessor.IT_IS_NOT_A_CLASS);
  }
  
  @Test public void errorBsonneNoDefaultConstructor() {
	    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Person", Joiner.on("\n").join(
	        "import com.sleepcamel.bsoneer.Bsonee;",
	        "@Bsonee",
	        "class Person {",
	        "  Person(long u){}",
	        "  int a;",
	        "}"));
	    ASSERT.about(javaSource()).that(sourceFile).processedWith(bsoneerProcessors()).failsToCompile().withErrorContaining(BsonProcessor.NO_DEFAULT_CONSTRUCTOR);
  }
  
  @Test public void errorBsonnePrivateDefaultConstructor() {
	    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Person", Joiner.on("\n").join(
	        "import com.sleepcamel.bsoneer.Bsonee;",
	        "@Bsonee",
	        "class Person {",
	        "  private Person(){}",
	        "  int a;",
	        "}"));
	    ASSERT.about(javaSource()).that(sourceFile).processedWith(bsoneerProcessors()).failsToCompile().withErrorContaining(BsonProcessor.NO_DEFAULT_CONSTRUCTOR);
  }
  
  @Test public void okBsonneProtectedDefaultConstructorAndOther() {
	    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Person", Joiner.on("\n").join(
	        "import com.sleepcamel.bsoneer.Bsonee;",
	        "@Bsonee",
	        "class Person {",
	        "  protected Person(){}",
	        "  public Person(int e){}",
	        "  int a;",
	        "}"));
	    ASSERT.about(javaSource()).that(sourceFile).processedWith(bsoneerProcessors()).compilesWithoutError();
	    
	    sourceFile = JavaFileObjects.forSourceString("Person", Joiner.on("\n").join(
	        "import com.sleepcamel.bsoneer.Bsonee;",
	        "@Bsonee",
	        "class Person {",
	        "  public Person(int e){}",
	        "  protected Person(){}",
	        "  int a;",
	        "}"));
		ASSERT.about(javaSource()).that(sourceFile).processedWith(bsoneerProcessors()).compilesWithoutError();
  }
  
  @Test public void transientFieldsNotPersisted() {
	    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Person", Joiner.on("\n").join(
	        "import com.sleepcamel.bsoneer.Bsonee;",
	        "@Bsonee",
	        "class Person {",
	        "  transient int a;",
	        "}"));
	    
	    JavaFileObject expectedCodec =
	            JavaFileObjects.forSourceString("PersonBsoneeCodec", Joiner.on("\n").join(
	            		"// Code generated by bsoneer-compiler.  Do not edit.",
	            		"//",
	            		"import com.sleepcamel.bsoneer.BaseBsoneerCodec;",
	            		"import java.lang.Class;",
	            		"import java.lang.Override;",
	            		"import java.lang.SuppressWarnings;",
	            		"import org.bson.BsonWriter;",
	            		"import org.bson.codecs.EncoderContext;",
	            		"import org.bson.codecs.configuration.CodecRegistry;",
	            		"",
	            		"/**",
	            		" * Code generated by bsoneer-compiler.  Do not edit.",
	            		" */",
	            		"public class PersonBsoneeCodec extends BaseBsoneerCodec<Person> {",
	            		"	public PersonBsoneeCodec() {",
	            		"		super();",
	            		"	}",
	            		"",
	            		"	public PersonBsoneeCodec(final CodecRegistry registry) {",
	            		"		super(registry);",
	            		"	}",
	            		"",
	            		"	/**",
	            		"	 * {@inhericDoc}",
	            		"	 */",
	            		"	public Class<Person> getEncoderClass() {",
	            		"		return Person.class;",
	            		"	}",
	            		"",
	            		"	/**",
	            		"	 * {@inhericDoc}",
	            		"	 */",
	            		"	@Override",
	            		"	@SuppressWarnings({\"unchecked\", \"rawtypes\"})",
	            		"	protected void encodeVariables(BsonWriter writer, Person value, EncoderContext encoderContext) {",
	            		"		super.encodeVariables(writer,value,encoderContext);",
	            		"	}",
	            		"",
	            		"	@Override",
	            		"	protected Person instantiate() {",
	            		"		return new Person();",
	            		"	}",
	            		"",
	            		"	protected void setupSetters() {",
	            		"	}",
	            		"",
	            		"}"));

	    ASSERT.about(javaSource()).that(sourceFile).processedWith(bsoneerProcessors())
	    	.compilesWithoutError().and().generatesSources(expectedCodec);
}
}
