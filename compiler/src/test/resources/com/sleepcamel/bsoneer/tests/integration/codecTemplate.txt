
import com.sleepcamel.bsoneer.BaseBsoneerCodec;
import com.sleepcamel.bsoneer.BsoneeBaseSetter;
import java.lang.Class;
import java.lang.Override;
import java.lang.SuppressWarnings;
import org.bson.BsonReader;
import org.bson.BsonWriter;
import org.bson.codecs.Codec;
import org.bson.codecs.DecoderContext;
import org.bson.codecs.EncoderContext;
import org.bson.codecs.ObjectIdGenerator;
import org.bson.codecs.configuration.CodecRegistry;

/**
 * Code generated by bsoneer-compiler.  Do not edit.
 */
public class $$CLASS_NAME$$BsoneeCodec extends BaseBsoneerCodec<$$CLASS_NAME$$> {
    
    public $$CLASS_NAME$$BsoneeCodec(final CodecRegistry registry) {
        super(registry, new ObjectIdGenerator());
    }
    
    /**
     * {@inhericDoc}
     */
    public Class<$$CLASS_NAME$$> getEncoderClass() {
        return $$CLASS_NAME$$.class;
    }
    
    /**
     * {@inhericDoc}
     */
    @Override()
    @SuppressWarnings({"unchecked", "rawtypes"})
    protected void encodeVariables(BsonWriter writer, $$CLASS_NAME$$ value, EncoderContext encoderContext) {
        if (encoderContext.isEncodingCollectibleDocument()) {
            writer.writeName("_id");
            Object vid = idGenerator.generate();
            Codec cid = registry.get(vid.getClass());
            encoderContext.encodeWithChildContext(cid, writer, vid);
        }
        writer.writeName("a");
        writer.writeInt32(value.a);
        super.encodeVariables(writer, value, encoderContext);
    }
    
    @Override()
    protected $$CLASS_NAME$$ instantiate() {
        return new $$CLASS_NAME$$();
    }
    
    protected void setupSetters() {
        settersByName.put("a", new ASetter());
    }
    
    class ASetter implements BsoneeBaseSetter<$$CLASS_NAME$$> {
        
        public void set($$CLASS_NAME$$ instance, BsonReader reader, DecoderContext decoderContext) {
            instance.a = reader.readInt32();
        }
    }
}