/*
 * Copyright (C) 2015 Sleepcamel.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.sleepcamel.bsoneer.tests.integration;

import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
import static com.sleepcamel.bsoneer.tests.integration.ProcessorTestUtils.bsoneerProcessors;
import static org.truth0.Truth.ASSERT;

import java.util.Arrays;

import javax.tools.JavaFileObject;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import com.google.common.base.Joiner;
import com.google.testing.compile.JavaFileObjects;

@RunWith(JUnit4.class)
public final class BsonMapCodecGenerationTest {
	@Test
	public void genericCodec() {
		JavaFileObject bSourceFile = JavaFileObjects.forSourceString(
				"B",
				Joiner.on("\n").join("import com.sleepcamel.bsoneer.Bsonee;",
						"import java.lang.String;",
						"import java.lang.Long;",
						"import java.lang.Boolean;",
						"import java.util.Map;",
						"@Bsonee",
						"class B<Q,U> {",
						"  Map<String,Long> sl;",
						"  Map<U,Long> ul;",
						"  Map<String,Q> sq;",
						"  Map<Q,U> qu;",
						// TODO Map.Entry<String,Boolean> mesb;
						"  Map<Map<String,Boolean>,Long> msb;",
						"}"));
		
		JavaFileObject bExpectedCodec = JavaFileObjects
				.forSourceString(
						"BBsoneeCollectibleCodec",
						Joiner.on("\n")
								.join("// Code generated by bsoneer-compiler.  Do not edit.",
										"//",
										"import com.sleepcamel.bsoneer.BaseBsoneerCodec;",
										"import com.sleepcamel.bsoneer.BsoneeBaseSetter;",
										"import java.lang.Boolean;",
										"import java.lang.Class;",
										"import java.lang.Long;",
										"import java.lang.Object;",
										"import java.lang.Override;",
										"import java.lang.String;",
										"import java.lang.SuppressWarnings;",
										"import java.util.LinkedHashMap;",
										"import java.util.Map;",
										"import java.util.Set;",
										"import javax.annotation.Generated;",
										"import org.bson.BsonReader;",
										"import org.bson.BsonType;",
										"import org.bson.BsonWriter;",
										"import org.bson.codecs.Codec;",
										"import org.bson.codecs.DecoderContext;",
										"import org.bson.codecs.EncoderContext;",
										"import org.bson.codecs.ObjectIdGenerator;",
										"import org.bson.codecs.configuration.CodecRegistry;",
										"",
										"/**",
										" * Code generated by bsoneer-compiler.  Do not edit.",
										" */",
										"@Generated(\"com.sleepcamel.bsoneer.processor.BsonProcessor\")",
										"public class BBsoneeCollectibleCodec extends BaseBsoneerCodec<B> {",
										"	public BBsoneeCollectibleCodec(final CodecRegistry registry) {",
										"		super(registry, new ObjectIdGenerator());",
										"	}",
										"",
										"	/**",
										"	 * {@inhericDoc}",
										"	 */",
										"	public Class<B> getEncoderClass() {",
										"		return B.class;",
										"	}",
										"",
										"	/**",
										"	 * {@inhericDoc}",
										"	 */",
										"	@Override",
										"	@SuppressWarnings({\"unchecked\", \"rawtypes\"})",
										"	protected void encodeVariables(BsonWriter writer, B value, EncoderContext encoderContext) {",
										"		writer.writeName(\"_id\");",
										"		Object vid = idGenerator.generate();",
										"		Codec cid = registry.get(vid.getClass());",
										"		encoderContext.encodeWithChildContext(cid, writer, vid);",
//										Map<String,Long> sl;
										"		if (value.sl != null) {",
										"			writer.writeName(\"sl\");",
										"			writer.writeStartArray();",
										"			for (Map.Entry<String, Long> _entry0:((Set<Map.Entry<String, Long>>)value.sl.entrySet())) {",
										"				if (_entry0 == null) {",
										"					writer.writeNull();",
										"				} else {",
										"					writer.writeStartDocument();",
										"					writer.writeName(\"key\");",
										"					if (_entry0.getKey() == null) {",
										"						writer.writeNull();",
										"					} else {",
										"						writer.writeString(_entry0.getKey());",
										"					}",
										"					writer.writeName(\"value\");",
										"					if (_entry0.getValue() == null) {",
										"						writer.writeNull();",
										"					} else {",
										"						writer.writeInt64(_entry0.getValue());",
										"					}",
										"					writer.writeEndDocument();",
										"				}",
										"			}",
										"			writer.writeEndArray();",
										"		}",
//										Map<U,Long> ul;
										"		if (value.ul != null) {",
										"			writer.writeName(\"ul\");",
										"			writer.writeStartArray();",
										"			for (Map.Entry<Object, Long> _entry1:((Set<Map.Entry<Object, Long>>)value.ul.entrySet())) {",
										"				if (_entry1 == null) {",
										"					writer.writeNull();",
										"				} else {",
										"					writer.writeStartDocument();",
										"					writer.writeName(\"key\");",
										"					if (_entry1.getKey() == null) {",
										"						writer.writeNull();",
										"					} else {",
										"						Codec c = registry.get(_entry1.getKey().getClass());",
										"						encoderContext.encodeWithChildContext(c, writer, _entry1.getKey());",
										"					}",
										"					writer.writeName(\"value\");",
										"					if (_entry1.getValue() == null) {",
										"						writer.writeNull();",
										"					} else {",
										"						writer.writeInt64(_entry1.getValue());",
										"					}",
										"					writer.writeEndDocument();",
										"				}",
										"			}",
										"			writer.writeEndArray();",
										"		}",
//										Map<String,Q> sq;										
										"		if (value.sq != null) {",
										"			writer.writeName(\"sq\");",
										"			writer.writeStartArray();",
										"			for (Map.Entry<String, Object> _entry2:((Set<Map.Entry<String, Object>>)value.sq.entrySet())) {",
										"				if (_entry2 == null) {",
										"					writer.writeNull();",
										"				} else {",
										"					writer.writeStartDocument();",
										"					writer.writeName(\"key\");",
										"					if (_entry2.getKey() == null) {",
										"						writer.writeNull();",
										"					} else {",
										"						writer.writeString(_entry2.getKey());",
										"					}",
										"					writer.writeName(\"value\");",
										"					if (_entry2.getValue() == null) {",
										"						writer.writeNull();",
										"					} else {",
										"						Codec c = registry.get(_entry2.getValue().getClass());",
										"						encoderContext.encodeWithChildContext(c, writer, _entry2.getValue());",
										"					}",
										"					writer.writeEndDocument();",
										"				}",
										"			}",
										"			writer.writeEndArray();",
										"		}",
//										Map<Q,U> qu;
										"		if (value.qu != null) {",
										"			writer.writeName(\"qu\");",
										"			writer.writeStartArray();",
										"			for (Map.Entry<Object, Object> _entry3:((Set<Map.Entry<Object, Object>>)value.qu.entrySet())) {",
										"				if (_entry3 == null) {",
										"					writer.writeNull();",
										"				} else {",
										"					writer.writeStartDocument();",
										"					writer.writeName(\"key\");",
										"					if (_entry3.getKey() == null) {",
										"						writer.writeNull();",
										"					} else {",
										"						Codec c = registry.get(_entry3.getKey().getClass());",
										"						encoderContext.encodeWithChildContext(c, writer, _entry3.getKey());",
										"					}",
										"					writer.writeName(\"value\");",
										"					if (_entry3.getValue() == null) {",
										"						writer.writeNull();",
										"					} else {",
										"						Codec c = registry.get(_entry3.getValue().getClass());",
										"						encoderContext.encodeWithChildContext(c, writer, _entry3.getValue());",
										"					}",
										"					writer.writeEndDocument();",
										"				}",
										"			}",
										"			writer.writeEndArray();",
										"		}",
//										Map<Map<String,Boolean> msb;
										"		if (value.msb != null) {",
										"			writer.writeName(\"msb\");",
										"			writer.writeStartArray();",
										"			for (Map.Entry<Map<String, Boolean>, Long> _entry4:((Set<Map.Entry<Map<String, Boolean>, Long>>)value.msb.entrySet())) {",
										"				if (_entry4 == null) {",
										"					writer.writeNull();",
										"				} else {",
										"					writer.writeStartDocument();",
										"					writer.writeName(\"key\");",
										"					if (_entry4.getKey() == null) {",
										"						writer.writeNull();",
										"					} else {",
										"						writer.writeStartArray();",
										"						for (Map.Entry<String, Boolean> _entry5:((Set<Map.Entry<String, Boolean>>)_entry4.getKey().entrySet())) {",
										"							if (_entry5 == null) {",
										"								writer.writeNull();",
										"							} else {",
										"								writer.writeStartDocument();",
										"								writer.writeName(\"key\");",
										"								if (_entry5.getKey() == null) {",
										"									writer.writeNull();",
										"								} else {",
										"									writer.writeString(_entry5.getKey());",
										"								}",
										"								writer.writeName(\"value\");",
										"								if (_entry5.getValue() == null) {",
										"									writer.writeNull();",
										"								} else {",
										"									writer.writeBoolean(_entry5.getValue());",
										"								}",
										"								writer.writeEndDocument();",
										"							}",
										"						}",
										"						writer.writeEndArray();",
										"					}",
										"					writer.writeName(\"value\");",
										"					if (_entry4.getValue() == null) {",
										"						writer.writeNull();",
										"					} else {",
										"						writer.writeInt64(_entry4.getValue());",
										"					}",
										"					writer.writeEndDocument();",
										"				}",
										"			}",
										"			writer.writeEndArray();",
										"		}",
										"		super.encodeVariables(writer,value,encoderContext);",
										"	}",
										"",
										"	@Override",
										"	protected B instantiate() {",
										"		return new B();",
										"	}",
										"",
										"	protected void setupSetters() {",
										"		settersByName.put(\"sl\",new SlSetter());",
										"		settersByName.put(\"ul\",new UlSetter());",
										"		settersByName.put(\"sq\",new SqSetter());",
										"		settersByName.put(\"qu\",new QuSetter());",
										"		settersByName.put(\"msb\",new MsbSetter());",
										"	}",
										"",
										"	class SlSetter implements BsoneeBaseSetter<B> {",
										"		public void set(B instance, BsonReader reader, DecoderContext decoderContext) {",
										"			BsonType bsonType = reader.getCurrentBsonType();",
										"			if (bsonType == BsonType.NULL) {",
										"				reader.readNull();",
										"				instance.sl = null;",
										"				return;",
										"			}",
										"			Map<String, Long> value = instance.sl;",
										"			if (value == null) {",
										"				value = new LinkedHashMap<String, Long>();",
										"				instance.sl = value;",
										"			}",
										"			reader.readStartArray();",
										"			while (reader.readBsonType() != BsonType.END_OF_DOCUMENT) {",
										"				bsonType = reader.getCurrentBsonType();",
										"				if (bsonType == BsonType.NULL) {",
										"					reader.readNull();",
										"				} else {",
										"					reader.readStartDocument();",
										"					reader.readName(\"key\");",
										"					String _entry00 = null;",
										"					Long _entry01 = null;",
										"					bsonType = reader.getCurrentBsonType();",
										"					if (bsonType == BsonType.NULL) {",
										"						reader.readNull();",
										"						reader.skipName();",
										"						reader.skipValue();",
										"					} else {",
										"						_entry00 = reader.readString();",
										"						reader.readName(\"value\");",
										"						_entry01 = reader.readInt64();",
										"					}",
										"					reader.readEndDocument();",
										"					value.put(_entry00,_entry01);",
										"				}",
										"			}",
										"			reader.readEndArray();",
										"		}", "	}",
										"",
										"	class UlSetter implements BsoneeBaseSetter<B> {",
										"		public void set(B instance, BsonReader reader, DecoderContext decoderContext) {",
										"			BsonType bsonType = reader.getCurrentBsonType();",
										"			if (bsonType == BsonType.NULL) {",
										"				reader.readNull();",
										"				instance.ul = null;",
										"				return;",
										"			}",
										"			Map<Object, Long> value = instance.ul;",
										"			if (value == null) {",
										"				value = new LinkedHashMap<Object, Long>();",
										"				instance.ul = value;",
										"			}",
										"			reader.readStartArray();",
										"			while (reader.readBsonType() != BsonType.END_OF_DOCUMENT) {",
										"				bsonType = reader.getCurrentBsonType();",
										"				if (bsonType == BsonType.NULL) {",
										"					reader.readNull();",
										"				} else {",
										"					reader.readStartDocument();",
										"					reader.readName(\"key\");",
										"					Object _entry10 = null;",
										"					Long _entry11 = null;",
										"					bsonType = reader.getCurrentBsonType();",
										"					if (bsonType == BsonType.NULL) {",
										"						reader.readNull();",
										"						reader.skipName();",
										"						reader.skipValue();",
										"					} else {",
										"						_entry10 = (java.lang.Object)defaultReader.readValue(reader,decoderContext);",
										"						reader.readName(\"value\");",
										"						_entry11 = reader.readInt64();",
										"					}",
										"					reader.readEndDocument();",
										"					value.put(_entry10,_entry11);",
										"				}",
										"			}",
										"			reader.readEndArray();",
										"		}",
										"	}",
										"",
										"	class SqSetter implements BsoneeBaseSetter<B> {",
										"		public void set(B instance, BsonReader reader, DecoderContext decoderContext) {",
										"			BsonType bsonType = reader.getCurrentBsonType();",
										"			if (bsonType == BsonType.NULL) {",
										"				reader.readNull();",
										"				instance.sq = null;",
										"				return;",
										"			}",
										"			Map<String, Object> value = instance.sq;",
										"			if (value == null) {",
										"				value = new LinkedHashMap<String, Object>();",
										"				instance.sq = value;",
										"			}",
										"			reader.readStartArray();",
										"			while (reader.readBsonType() != BsonType.END_OF_DOCUMENT) {",
										"				bsonType = reader.getCurrentBsonType();",
										"				if (bsonType == BsonType.NULL) {",
										"					reader.readNull();",
										"				} else {",
										"					reader.readStartDocument();",
										"					reader.readName(\"key\");",
										"					String _entry20 = null;",
										"					Object _entry21 = null;",
										"					bsonType = reader.getCurrentBsonType();",
										"					if (bsonType == BsonType.NULL) {",
										"						reader.readNull();",
										"						reader.skipName();",
										"						reader.skipValue();",
										"					} else {",
										"						_entry20 = reader.readString();",
										"						reader.readName(\"value\");",
										"						_entry21 = (java.lang.Object)defaultReader.readValue(reader,decoderContext);",
										"					}",
										"					reader.readEndDocument();",
										"					value.put(_entry20,_entry21);",
										"				}",
										"			}",
										"			reader.readEndArray();",
										"		}",
										"	}",
										"",
										"	class QuSetter implements BsoneeBaseSetter<B> {",
										"		public void set(B instance, BsonReader reader, DecoderContext decoderContext) {",
										"			BsonType bsonType = reader.getCurrentBsonType();",
										"			if (bsonType == BsonType.NULL) {",
										"				reader.readNull();",
										"				instance.qu = null;",
										"				return;",
										"			}",
										"			Map<Object, Object> value = instance.qu;",
										"			if (value == null) {",
										"				value = new LinkedHashMap<Object, Object>();",
										"				instance.qu = value;",
										"			}",
										"			reader.readStartArray();",
										"			while (reader.readBsonType() != BsonType.END_OF_DOCUMENT) {",
										"				bsonType = reader.getCurrentBsonType();",
										"				if (bsonType == BsonType.NULL) {",
										"					reader.readNull();",
										"				} else {",
										"					reader.readStartDocument();",
										"					reader.readName(\"key\");",
										"					Object _entry30 = null;",
										"					Object _entry31 = null;",
										"					bsonType = reader.getCurrentBsonType();",
										"					if (bsonType == BsonType.NULL) {",
										"						reader.readNull();",
										"						reader.skipName();",
										"						reader.skipValue();",
										"					} else {",
										"						_entry30 = (java.lang.Object)defaultReader.readValue(reader,decoderContext);",
										"						reader.readName(\"value\");",
										"						_entry31 = (java.lang.Object)defaultReader.readValue(reader,decoderContext);",
										"					}",
										"					reader.readEndDocument();",
										"					value.put(_entry30,_entry31);",
										"				}",
										"			}",
										"			reader.readEndArray();",
										"		}",
										"	}",
										"",
										"	class MsbSetter implements BsoneeBaseSetter<B> {",
										"		public void set(B instance, BsonReader reader, DecoderContext decoderContext) {",
										"			BsonType bsonType = reader.getCurrentBsonType();",
										"			if (bsonType == BsonType.NULL) {",
										"				reader.readNull();",
										"				instance.msb = null;",
										"				return;",
										"			}",
										"			Map<Map<String, Boolean>, Long> value = instance.msb;",
										"			if (value == null) {",
										"				value = new LinkedHashMap<Map<String, Boolean>, Long>();",
										"				instance.msb = value;",
										"			}",
										"			reader.readStartArray();",
										"			while (reader.readBsonType() != BsonType.END_OF_DOCUMENT) {",
										"				bsonType = reader.getCurrentBsonType();",
										"				if (bsonType == BsonType.NULL) {",
										"					reader.readNull();",
										"				} else {",
										"					reader.readStartDocument();",
										"					reader.readName(\"key\");",
										"					Map<String, Boolean> _entry40 = null;",
										"					Long _entry41 = null;",
										"					bsonType = reader.getCurrentBsonType();",
										"					if (bsonType == BsonType.NULL) {",
										"						reader.readNull();",
										"						reader.skipName();",
										"						reader.skipValue();",
										"					} else {",
										"						_entry40 = new LinkedHashMap<String, Boolean>();",
										"						reader.readStartArray();",
										"						while (reader.readBsonType() != BsonType.END_OF_DOCUMENT) {",
										"							bsonType = reader.getCurrentBsonType();",
										"							if (bsonType == BsonType.NULL) {",
										"								reader.readNull();",
										"							} else {",
										"								reader.readStartDocument();",
										"								reader.readName(\"key\");",
										"								String _entry50 = null;",
										"								Boolean _entry51 = null;",
										"								bsonType = reader.getCurrentBsonType();",
										"								if (bsonType == BsonType.NULL) {",
										"									reader.readNull();",
										"									reader.skipName();",
										"									reader.skipValue();",
										"								} else {",
										"									_entry50 = reader.readString();",
										"									reader.readName(\"value\");",
										"									_entry51 = reader.readBoolean();",
										"								}",
										"								reader.readEndDocument();",
										"								_entry40.put(_entry50,_entry51);",
										"							}",
										"						}",
										"						reader.readEndArray();",
										"						reader.readName(\"value\");",
										"						_entry41 = reader.readInt64();",
										"					}",
										"					reader.readEndDocument();",
										"					value.put(_entry40,_entry41);",
										"				}",
										"			}",
										"			reader.readEndArray();",
										"		}",
										"	}",
										"", "}"));

		ASSERT.about(javaSources()).that(Arrays.asList(bSourceFile))
		.processedWith(bsoneerProcessors()).compilesWithoutError().and()
		.generatesSources(bExpectedCodec);
	}
	
}
