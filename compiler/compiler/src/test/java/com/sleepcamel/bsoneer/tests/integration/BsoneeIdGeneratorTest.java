/*
 * Copyright (C) 2015 Sleepcamel.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.sleepcamel.bsoneer.tests.integration;

import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
import static com.sleepcamel.bsoneer.tests.integration.ProcessorTestUtils.bsoneerProcessors;
import static org.truth0.Truth.ASSERT;

import java.util.Arrays;

import javax.tools.JavaFileObject;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import com.google.common.base.Joiner;
import com.google.testing.compile.JavaFileObjects;

@RunWith(JUnit4.class)
final public class BsoneeIdGeneratorTest {

	@Test public void basicBsoneeIdGeneratorTest() {
	    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Person", Joiner.on("\n").join(
	        "import com.sleepcamel.bsoneer.Bsonee;",
	        "@Bsonee(idGenerator=PersonIdGenerator.class)",
	        "class Person {",
	        "  Person() {}",
	        "  int a;",
	        "}"));
	    
	    JavaFileObject stringIdGenerator = JavaFileObjects.forSourceString("PersonIdGenerator", Joiner.on("\n").join(
		        "import com.sleepcamel.bsoneer.IdGenerator;",
		        "public class PersonIdGenerator extends IdGenerator<Person, String> {",
		        "  public String generate(Person instance) {",
		        "	return \"blabla\";",
		        "  }",
		        "}"));

		JavaFileObject expectedCodec = JavaFileObjects
				.forSourceString(
						"PersonBsoneeCollectibleCodec",
						Joiner.on("\n")
							.join("// Code generated by bsoneer-compiler.  Do not edit.",
								"//",
								"import com.sleepcamel.bsoneer.BaseBsoneerCodec;",
								"import com.sleepcamel.bsoneer.BsoneeBaseSetter;",
								"import java.lang.Class;",
								"import java.lang.Override;",
								"import java.lang.String;",
								"import java.lang.SuppressWarnings;",
								"import javax.annotation.Generated;",
								"import org.bson.BsonReader;",
								"import org.bson.BsonWriter;",
								"import org.bson.codecs.DecoderContext;",
								"import org.bson.codecs.EncoderContext;",
								"import org.bson.codecs.configuration.CodecRegistry;",
								"",
								"/**",
								" * Code generated by bsoneer-compiler.  Do not edit.",
								" */",
								"@Generated(\"com.sleepcamel.bsoneer.processor.BsonProcessor\")",
								"public class PersonBsoneeCollectibleCodec extends BaseBsoneerCodec<Person> {",
								"	public PersonBsoneeCollectibleCodec(final CodecRegistry registry) {",
								"		super(registry, new PersonIdGenerator());",
								"	}",
								"",
								"	/**",
								"	 * {@inhericDoc}",
								"	 */",
								"	public Class<Person> getEncoderClass() {",
								"		return Person.class;",
								"	}",
								"",
								"	/**",
								"	 * {@inhericDoc}",
								"	 */",
								"	@Override",
								"	@SuppressWarnings({\"unchecked\", \"rawtypes\"})",
								"	protected void encodeVariables(BsonWriter writer, Person value, EncoderContext encoderContext) {",
								"		writer.writeName(\"_id\");",
								"		{",
								"			String vid = ((PersonIdGenerator)idGenerator).generate(value);",
								"			writer.writeString(vid);",
								"		}",
								"		writer.writeName(\"a\");",
								"		writer.writeInt32(value.a);",
								"		super.encodeVariables(writer,value,encoderContext);",
								"	}",
								"",
								"	@Override",
								"	protected Person instantiate() {",
								"		return new Person();",
								"	}",
								"",
								"	protected void setupSetters() {",
								"		settersByName.put(\"a\",new ASetter());",
								"	}",
								"",
								"	class ASetter implements BsoneeBaseSetter<Person> {",
								"		public void set(Person instance, BsonReader reader, DecoderContext decoderContext) {",
								"			instance.a = reader.readInt32();",
								"		}", "	}", "", "}"));

	    ASSERT.about(javaSources()).that(Arrays.asList(stringIdGenerator, sourceFile)).
	    	processedWith(bsoneerProcessors()).compilesWithoutError().
	    	and().generatesSources(expectedCodec);
	}
	
	@Test public void genericBsoneeIdGeneratorTest() {
	    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Person", Joiner.on("\n").join(
	        "import com.sleepcamel.bsoneer.Bsonee;",
	        "@Bsonee(idGenerator=StringPersonIdGenerator.class)",
	        "class Person {",
	        "  Person() {}",
	        "  int a;",
	        "}"));
	    
	    JavaFileObject abstractPersonIdGenerator = JavaFileObjects.forSourceString("PersonIdGenerator", Joiner.on("\n").join(
		        "import com.sleepcamel.bsoneer.IdGenerator;",
		        "abstract public class PersonIdGenerator<T> extends IdGenerator<Person, T> {",
		        "}"));
	    
	    JavaFileObject stringIdGenerator = JavaFileObjects.forSourceString("StringPersonIdGenerator", Joiner.on("\n").join(
		        "public class StringPersonIdGenerator extends PersonIdGenerator<String> {",
		        "  public String generate(Person instance) {",
		        "	return \"blabla\";",
		        "  }",
		        "}"));
	    
		String codecCode = Joiner.on("\n")
				.join("// Code generated by bsoneer-compiler.  Do not edit.",
						"//",
						"import com.sleepcamel.bsoneer.BaseBsoneerCodec;",
						"import com.sleepcamel.bsoneer.BsoneeBaseSetter;",
						"import java.lang.Class;",
						"import java.lang.Override;",
						"import java.lang.String;",
						"import java.lang.SuppressWarnings;",
						"import javax.annotation.Generated;",
						"import org.bson.BsonReader;",
						"import org.bson.BsonWriter;",
						"import org.bson.codecs.DecoderContext;",
						"import org.bson.codecs.EncoderContext;",
						"import org.bson.codecs.configuration.CodecRegistry;",
						"",
						"/**",
						" * Code generated by bsoneer-compiler.  Do not edit.",
						" */",
						"@Generated(\"com.sleepcamel.bsoneer.processor.BsonProcessor\")",
						"public class PersonBsoneeCollectibleCodec extends BaseBsoneerCodec<Person> {",
						"	public PersonBsoneeCollectibleCodec(final CodecRegistry registry) {",
						"		super(registry, new StringPersonIdGenerator());",
						"	}",
						"",
						"	/**",
						"	 * {@inhericDoc}",
						"	 */",
						"	public Class<Person> getEncoderClass() {",
						"		return Person.class;",
						"	}",
						"",
						"	/**",
						"	 * {@inhericDoc}",
						"	 */",
						"	@Override",
						"	@SuppressWarnings({\"unchecked\", \"rawtypes\"})",
						"	protected void encodeVariables(BsonWriter writer, Person value, EncoderContext encoderContext) {",
						"		writer.writeName(\"_id\");",
						"		{",
						"			String vid = ((StringPersonIdGenerator)idGenerator).generate(value);",
						"			writer.writeString(vid);",
						"		}",
						"		writer.writeName(\"a\");",
						"		writer.writeInt32(value.a);",
						"		super.encodeVariables(writer,value,encoderContext);",
						"	}",
						"",
						"	@Override",
						"	protected Person instantiate() {",
						"		return new Person();",
						"	}",
						"",
						"	protected void setupSetters() {",
						"		settersByName.put(\"a\",new ASetter());",
						"	}",
						"",
						"	class ASetter implements BsoneeBaseSetter<Person> {",
						"		public void set(Person instance, BsonReader reader, DecoderContext decoderContext) {",
						"			instance.a = reader.readInt32();",
						"		}", "	}", "", "}");
		JavaFileObject expectedCodec = JavaFileObjects
				.forSourceString(
						"PersonBsoneeCollectibleCodec",
						codecCode);

	    ASSERT.about(javaSources()).that(Arrays.asList(abstractPersonIdGenerator, stringIdGenerator, sourceFile)).
	    	processedWith(bsoneerProcessors()).compilesWithoutError().
	    	and().generatesSources(expectedCodec);

	    JavaFileObject intIdGenerator = JavaFileObjects.forSourceString("IntPersonIdGenerator", Joiner.on("\n").join(
		        "public class IntPersonIdGenerator extends PersonIdGenerator<Integer> {",
		        "  public Integer generate(Person instance) {",
		        "	return 4;",
		        "  }",
		        "}"));
	    
	    expectedCodec = JavaFileObjects
				.forSourceString(
						"PersonBsoneeCollectibleCodec",
						codecCode.replaceAll("writeString", "writeInt32")
							.replaceAll("String vid", "Integer vid")
							.replaceAll("StringPersonIdGenerator", "IntPersonIdGenerator")
							.replaceAll("import java\\.lang\\.Override;\nimport java\\.lang\\.String;\n",
									"import java.lang.Integer;\nimport java.lang.Override;\n"));
	    
	    sourceFile = JavaFileObjects.forSourceString("Person", Joiner.on("\n").join(
		        "import com.sleepcamel.bsoneer.Bsonee;",
		        "@Bsonee(idGenerator=IntPersonIdGenerator.class)",
		        "class Person {",
		        "  Person() {}",
		        "  int a;",
		        "}"));
	    
	    ASSERT.about(javaSources()).that(Arrays.asList(abstractPersonIdGenerator, intIdGenerator, sourceFile)).
    	processedWith(bsoneerProcessors()).compilesWithoutError().
    	and().generatesSources(expectedCodec);
	    
	    JavaFileObject genIdGenerator = JavaFileObjects.forSourceString("GenPersonIdGenerator", Joiner.on("\n").join(
		        "public class GenPersonIdGenerator<T> extends PersonIdGenerator<T> {",
		        "  public T generate(Person instance) {",
		        "	return null;",
		        "  }",
		        "}"));
	    
	    expectedCodec = JavaFileObjects
				.forSourceString(
						"PersonBsoneeCollectibleCodec",
						codecCode.replaceFirst("writer\\.writeString\\(vid\\);",
								"Codec c = registry.get(vid.getClass());\n"+
								"encoderContext.encodeWithChildContext(c, writer, vid);")
							.replaceAll("String vid", "Object vid")
							.replaceAll("StringPersonIdGenerator", "GenPersonIdGenerator")
							.replaceFirst("import java\\.lang\\.Override;\nimport java\\.lang\\.String;\n",
									"import java.lang.Object;\nimport java.lang.Override;\n")
							.replaceFirst("import org\\.bson\\.BsonWriter;",
									"import org.bson.BsonWriter;\nimport org.bson.codecs.Codec;\n"));
	    
	    sourceFile = JavaFileObjects.forSourceString("Person", Joiner.on("\n").join(
		        "import com.sleepcamel.bsoneer.Bsonee;",
		        "@Bsonee(idGenerator=GenPersonIdGenerator.class)",
		        "class Person {",
		        "  Person() {}",
		        "  int a;",
		        "}"));
	    
	    ASSERT.about(javaSources()).that(Arrays.asList(abstractPersonIdGenerator, genIdGenerator, sourceFile)).
    	processedWith(bsoneerProcessors()).compilesWithoutError().
    	and().generatesSources(expectedCodec);
	}
}
